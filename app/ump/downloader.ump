class Downloader
{
  projectRepo;
  remoteUrl;
  destinationDir;
  projectName=null;

  public downloadProjectGithub()
  {
  	$zipFile = $this->getDestinationDir() . "/project.zip"; // Local Zip File Path
	$zipResource = fopen($zipFile, "w");
	
	// Get the master archive from the project
	if(substr($this->getRemoteUrl(), -1) == '/') {
	  $projectArchive = $this->getRemoteUrl() . 'archive/master.zip';
	} else {
	  $projectArchive = $this->getRemoteUrl() . '/archive/master.zip';
	}

	// Get The Zip File From Server
	echo("** Downloading project zip...\n");
	$ch = curl_init();
	curl_setopt($ch, CURLOPT_URL, $projectArchive);
	curl_setopt($ch, CURLOPT_FAILONERROR, true);
	curl_setopt($ch, CURLOPT_HEADER, 0);
	curl_setopt($ch, CURLOPT_FOLLOWLOCATION, true);
	curl_setopt($ch, CURLOPT_AUTOREFERER, true);
	curl_setopt($ch, CURLOPT_BINARYTRANSFER,true);
	curl_setopt($ch, CURLOPT_TIMEOUT, 10);
	curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, 0);
	curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, 0); 
	curl_setopt($ch, CURLOPT_FILE, $zipResource);
	$page = curl_exec($ch);
	if(!$page) {
	 echo "Error :- ".curl_error($ch);
	}
	curl_close($ch);

	// Extract project zip and save its name
	echo("** Extracting project zip...\n");
    $zip = new ZipArchive;
    $res = $zip->open($zipFile);
    $this->projectName = $zip->getNameIndex(0);

    if($res == TRUE) {
     $zip->extractTo($this->getDestinationDir());
     $zip->close();
    } else {
    	exit("Could not extract project archive!");
    }
  }

  public function downloadProjectGoogleCode()
  {
  	echo("** Downloading project...\n");
    $command = 'hg clone ' . $this->getRemoteUrl() . ' ' . $this->getDestinationDir() . 'project/';
    exec($command);
  }
}